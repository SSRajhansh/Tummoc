package com.example.BestMetroRoute.services;

import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.BestMetroRoute.model.MetroStations;
import com.example.BestMetroRoute.model.TrainTiming;
import com.example.BestMetroRoute.repositories.MetroLinesRepository;
import com.example.BestMetroRoute.repositories.MetroStationsRepository;
import com.example.BestMetroRoute.repositories.TrainTimingRepository;

@Service
public class ExcelToDataBaseService {
	
	@Autowired
	private MetroStationsRepository metroStationsRepository;
	
	
	public void insert_data() {			
		
		String excelFilePath = "MetroStations.xlsx";
		try {
            long start = System.currentTimeMillis();             
            FileInputStream inputStream = new FileInputStream(excelFilePath); 
            Workbook workbook = new XSSFWorkbook(inputStream);
            int noOfSheet = workbook.getNumberOfSheets();            
            int stationId = 1;
        	List<TrainTiming> timeList= new ArrayList<TrainTiming>();
            for(int i = 0; i < noOfSheet; i++) {
            	Sheet sheet = workbook.getSheetAt(i);            	
            	int stationSeq = 1;
            	
                Iterator<Row> rowIterator = sheet.iterator();                
                rowIterator.next(); 
                while (rowIterator.hasNext()) {                	
                	MetroStations ms = new MetroStations();                	
                    Row nextRow = rowIterator.next();
                    Iterator<Cell> cellIterator = nextRow.cellIterator();
                    int train = 1; 
                    while (cellIterator.hasNext()) {
                        Cell nextCell = cellIterator.next();     
                        int columnIndex = nextCell.getColumnIndex();     
                        switch (columnIndex) {
                        case 0:
                        	ms.setStationId(stationId);                        	
                        	ms.setStationSeq(stationSeq++);
                        	
                        	String stationName = nextCell.getStringCellValue();
                        	ms.setStationName(stationName);
                        	
                        	String lineNum = sheet.getSheetName();
                        	ms.setLineNum(lineNum);
                            break;
                        case 1:
                        	String loc = nextCell.getRichStringCellValue().toString();                        	
                        	double latitude = Double.parseDouble(loc.split(", ",2)[0]);
                    		double longitude = Double.parseDouble(loc.split(", ",2)[1]);
                    		ms.setLatitude(latitude);
                    		ms.setLongitude(longitude);
                            break;
                        default:
                        	Date date = (Date) nextCell.getDateCellValue();
                        	SimpleDateFormat formatTime = new SimpleDateFormat("hh.mm");
                        	String time = formatTime.format(date);
                        	
                        	String trainId = "train"+ i + "-"+ train++;
                        	TrainTiming tt = new TrainTiming();
                        	tt.setStationId(stationId);
                        	tt.setTrainId(trainId);
                        	tt.setTime(time);
                            timeList.add(tt);
                        }
                    }
                    stationId++;
                    ms.setTrnTiming(timeList);
                    metroStationsRepository.save(ms);
                }   
                
            }            
            workbook.close(); 
            
            long end = System.currentTimeMillis();
            System.out.printf("Import done in %d ms\n", (end - start));
             
        } catch (IOException ex1) {
            System.out.println("Error reading file");
            ex1.printStackTrace();
        }
		
		
	}

}
